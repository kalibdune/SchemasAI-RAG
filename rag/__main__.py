import asyncio
import json
import logging
from dataclasses import dataclass

from rag.agents.coordinator import CoordinatorAgent, CoordinatorAnswer
from rag.agents.schema_creator import CreatorAnswer, SchemaCreatorAgent
from rag.config import config
from rag.message_broker.rabbit import RabbitServerService
from rag.model.embedding import Embedding
from rag.model.regular_llm import RegularLLM
from rag.store.vector import VectorStoreManager

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("rag.log"), logging.StreamHandler()],
)

logger = logging.getLogger(__name__)


@dataclass
class Agents:
    coordinator: CoordinatorAgent
    creator: SchemaCreatorAgent


def setup_agent():
    llm = RegularLLM()
    embedding = Embedding()
    store = VectorStoreManager(embedding)

    coordinator = CoordinatorAgent(llm, embedding)
    creator = SchemaCreatorAgent(llm, store)

    return Agents(coordinator, creator)


agents = setup_agent()
# req = """–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ HTTP API –ø–æ –∞–¥—Ä–µ—Å—É https://api.example.com/data –º–µ—Ç–æ–¥–æ–º POST, –ø–µ—Ä–µ–¥–∞–≤–∞—è JSON {"userId": 12345, "includeDetails": true} —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ Authorization: Bearer abcdef123456 –∏ Content-Type: application/json. –û—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –º–∞—Å—Å–∏–≤ JSON-–æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ id, name, email, phone. –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ XML –≤ –≤–∏–¥–µ: <userData><id>001</id><name>John Doe</name><email>john@example.com</email><phone>+1234567890</phone></userData>. –≠—Ç–∏ XML-—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ Kafka-–±—Ä–æ–∫–µ—Ä kafka-broker:9092 –≤ —Ç–æ–ø–∏–∫ user-xml-topic –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –±–µ–∑ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ 3 –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –Ω–∏–º–∏. –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Kafka –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª error.log –≤ —Ñ–æ—Ä–º–∞—Ç–µ: timestamp, XML-—Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏. JSON-—Å—Ö–µ–º–∞ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ userId (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ) –∏ includeDetails (–±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ), –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ id, name, email, phone. XML-—Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞—é—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ. JSON-—Å—Ö–µ–º–∞ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."""


async def target(message):
    message = json.loads(message)

    agents = setup_agent()
    coord_response: CoordinatorAnswer = await agents.coordinator.process(
        {"query": message["content"]}
    )
    logger.info(f"response from coordinator: {str(coord_response)}")

    if coord_response.action == "create":
        creator_response: CreatorAnswer = await agents.creator.process(
            {"query": coord_response.query}
        )
        logger.info(f"response from creator: {creator_response}")
        message = {
            "content": creator_response.raw_response,
            "sender_type": "ai",
            "chat_id": message["chat_id"],
        }
    else:
        message = {
            "content": "–ú—ã –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ–º –¥–∞—Ç—å –æ—Ç–≤–µ—Ç üòè",
            "sender_type": "ai",
            "chat_id": message["chat_id"],
        }

    return json.dumps(message)


async def main():
    rabbit_server = await RabbitServerService(queue_name="message_queue").connect()
    await rabbit_server.message_handler(target)


asyncio.run(main())
